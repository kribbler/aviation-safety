<?php
wp_register_script('jquery', ("http://code.jquery.com/jquery-latest.min.js"), false, '');
wp_enqueue_script('jquery');

wp_register_script('backstretch', (get_stylesheet_directory_uri() . "/js/jquery.backstretch.min.js"), false, '');
wp_enqueue_script('backstretch');

function child_ts_theme_widgets_init(){

    register_sidebar( array(
        'name' => __( 'Header Text', 'liva' ),
        'id' => 'header-text',
        'before_widget' => '<div id="%1$s" class="sidebar_widget %2$s">',
        'after_widget' => '</div>',
        'before_title' => '<div class="sidebar_title"><h3>',
        'after_title' => '</h3></div>',
    ) );

    register_sidebar( array(
        'name' => __( 'Header Right', 'liva' ),
        'id' => 'header-right',
        'before_widget' => '<div id="%1$s" class="sidebar_widget %2$s">',
        'after_widget' => '</div>',
        'before_title' => '<div class="sidebar_title"><h3>',
        'after_title' => '</h3></div>',
    ) );

	register_sidebar( array(
        'name' => __( 'Copyright area 1', 'liva' ),
        'id' => 'coyright-area-1',
        'before_widget' => '<div id="%1$s" class="sidebar_widget %2$s">',
        'after_widget' => '</div>',
        'before_title' => '<div class="sidebar_title"><h3>',
        'after_title' => '</h3></div>',
    ) );
	
	register_sidebar( array(
        'name' => __( 'Copyright area 2', 'liva' ),
        'id' => 'coyright-area-2',
        'before_widget' => '<div id="%1$s" class="sidebar_widget %2$s">',
        'after_widget' => '</div>',
        'before_title' => '<div class="sidebar_title"><h3>',
        'after_title' => '</h3></div>',
    ) );
	
    register_sidebar( array(
        'name' => __( 'Footer Above Home', 'liva' ),
        'id' => 'footer-above-home',
        'before_widget' => '<div id="%1$s" class="sidebar_widget %2$s">',
        'after_widget' => '</div>',
        'before_title' => '<div class="sidebar_title"><h3>',
        'after_title' => '</h3></div>',
    ) );

    register_sidebar( array(
        'name' => __( 'Footer Above Inner', 'liva' ),
        'id' => 'footer-above-inner',
        'before_widget' => '<div id="%1$s" class="sidebar_widget %2$s">',
        'after_widget' => '</div>',
        'before_title' => '<div class="sidebar_title"><h3>',
        'after_title' => '</h3></div>',
    ) );
}

add_action( 'widgets_init', 'child_ts_theme_widgets_init' );

function redirect_user_to_dashboard(){
    if (is_user_logged_in()){
        $current_user = wp_get_current_user();
        $userRole = ($current_user->caps);
        if ($userRole['subscriber']){
            wp_redirect( get_permalink( get_page_by_path( 'user-dashboard' ) ) );
        }
    }
}

function check_to_redirect_home(){
    if (!is_user_logged_in()){
        wp_redirect( home_url() );
        exit();
    }
}

function get_my_next_post(){
    $next_post = get_next_post();
}

add_action( 'init', 'create_post_type' );
function create_post_type() {
  register_post_type( 'aviation-questions',
    array(
      'labels' => array(
        'name' => __( 'Questions' ),
        'singular_name' => __( 'Question' )
      ),
      'public' => true,
      'has_archive' => true,
      'supports' => array('title', 'editor', 'custom-fields', 'wp_custom_post_template_meta_box'),
    )
  );
}

function wpse73190_gist_adjacent_post_where($sql) {
  if ( !is_main_query() || !is_singular() )
    return $sql;

  $the_post = get_post( get_the_ID() );
  $patterns = array();
  $patterns[] = '/post_date/';
  $patterns[] = '/\'[0-9]{4}-[0-9]{2}-[0-9]{2} [0-9]{2}:[0-9]{2}:[0-9]{2}\'/';
  $replacements = array();
  $replacements[] = 'menu_order';
  $replacements[] = $the_post->menu_order;
  return preg_replace( $patterns, $replacements, $sql );
}
add_filter( 'get_next_post_where', 'wpse73190_gist_adjacent_post_where' );
add_filter( 'get_previous_post_where', 'wpse73190_gist_adjacent_post_where' );

function wpse73190_gist_adjacent_post_sort($sql) {
  if ( !is_main_query() || !is_singular() )
    return $sql;

  $pattern = '/post_date/';
  $replacement = 'menu_order';
  return preg_replace( $pattern, $replacement, $sql );
}
add_filter( 'get_next_post_sort', 'wpse73190_gist_adjacent_post_sort' );
add_filter( 'get_previous_post_sort', 'wpse73190_gist_adjacent_post_sort' );

add_shortcode( 'show_question', 'show_questions' );

function show_questions( $atts, $content = null){
    extract(shortcode_atts(array(
        'for_slide'       => '',
        'taxonomy' => '',
        'term'     => ''
    ), $atts ) );

    $questions = set_questions();
    $question = $questions['q' . $for_slide];

    //echo "<pre>";var_dump($question);echo "</pre>";
    $output = "";
    $output .= '<h3 class="question_body">' . $question['body'] . '</h3>';
    if ($question['type'] == 'radio'){
        shuffle($question['options']);

        $output .= '<div class="question_answers">';
            $output .= '<input type="hidden" id="question_type" value="'.$question['type'].'" />';
            $output .= '<input type="hidden" id="question_answer" value="'.base64_encode($question['answer']).'" />';
            foreach ($question['options'] as $key => $value) {
                $output .= '<div class="question_option">';
                $output .= '<div class="question_option_text">' . $value . '</div>';
                $output .= '<input id="jop_'.$key.'" class="radio_answer" type="radio" name="radio_answer" value="'.$value.'" />';
                $output .= '<br />';
                $output .= '</div>';
            }
        $output .= '</div>'; //<div class="question_answers">

    }
    wp_reset_postdata();
    return $output;
}

function set_questions(){
    $questions = array(
        //simple radio questions
        'q8' => array(
            'type' => 'radio',
            'body' => 'What does Human Factors refer to the study of?',
            'options' => array(
                1 => 'a) Human capabilities and limitations in the workplace',
                2 => 'b) Human capabilities and stress in the workplace',
                3 => 'c) Human culpability and limitations in the workplace',
                4 => 'd) Human culpability and stress in the workplace'
            ),
            'answer' => 'd) Human culpability and stress in the workplace'
        ),
        'q19' => array(
            'type' => 'radio',
            'body' => 'What is THE ICEBERG ratio for UNSAFE ACT TO FATAL ACCIDENTS?',
            'options' => array(
                1 => '30 to 1',
                2 => '60 to 1',
                3 => '10 to 1',
                4 => '000\'s to 1'
            ),
            'answer' => '000\'s to 1'
        ),
        'q28' => array(
            'type' => 'radio',
            'body' => 'The ERROR CHAIN refers to?',
            'options' => array(
                1 => 'There are no problems for the maintenance staff carrying out the work.',
                2 => 'A collection of things that go wrong leading to an accident breaking the chain.',
                3 => 'All the links of the chain need to be in place for the accident to happen.',
                4 => 'Break one link in the chain cause the accident not to happen.'
            ),
            'answer' => 'Break one link in the chain cause the accident not to happen.'
        ),
        'q30' => array(
            'type' => 'radio',
            'body' => 'What does Murphy’s Law refer to?',
            'options' => array(
                1 => 'If something can go right it will',
                2 => 'If something can’t go wrong it will',
                3 => 'If something can go wrong it will',
                4 => 'If things go wrong leave them'
            ),
            'answer' => 'If something can go wrong it will'
        ),
        'q32' => array(
            'type' => 'radio',
            'body' => 'What is a Error?',
            'options' => array(
                1 => 'An error is a human action (or human behaviour) that unintentionally deviates from the expected action (or behaviour).',
                2 => 'A error is something that is done intentionally.',
                3 => 'A error is a cause done in a reckless manner.',
                4 => 'A error is a deliberate act.'
            ),
            'answer' => 'An error is a human action (or human behaviour) that unintentionally deviates from the expected action (or behaviour).'
        ),
        'q34' => array(
            'type' => 'radio',
            'body' => 'What are latent failures?',
            'options' => array(
                1 => 'Ones that have been made in the past and lay dormant',
                2 => 'Ones that have an immediate impact',
                3 => 'Ones where we can see results straight away',
                4 => 'Ones that happen as we are working'
            ),
            'answer' => 'Ones that have been made in the past and lay dormant'
        ),
        'q36' => array(
            'type' => 'radio',
            'body' => 'A violation is what?',
            'options' => array(
                1 => 'Carried out the work and made a mistake during it.',
                2 => 'Was committed unintentionally by a person.',
                3 => 'Is a human action (or human behaviour) that intentionally deviates from the expected action (or behaviour).',
                4 => 'Carrying out a job with the wrong procedure un- intentionally'
            ),
            'answer' => 'Is a human action (or human behaviour) that intentionally deviates from the expected action (or behaviour).'
        ),
        'q42' => array(
            'type' => 'radio',
            'body' => 'Why are Human factors important in the aeronautical engineering workplace?',
            'options' => array(
                1 => 'To preserve the managers responsibility',
                2 => 'To preserve the safety of people, assets, health and efficiency',
                3 => 'To save money',
                4 => 'Create more work with less time'
            ),
            'answer' => 'To preserve the safety of people, assets, health and efficiency'
        ),
        'q54' => array(
            'type' => 'radio',
            'body' => 'What is a disadvantage of shift work?',
            'options' => array(
                1 => 'Working unsociable hours so less time to spend with our family',
                2 => 'More days off',
                3 => 'Avoiding peak traffic when travelling to work',
                4 => 'Does not affect the persons body clock'
            ),
            'answer' => 'Working unsociable hours so less time to spend with our family'
        ),
        'q59' => array(
            'type' => 'radio',
            'body' => 'What are circadian rhythms?',
            'options' => array(
                1 => 'Circadian rhythms are physiological and behavioural functions and processes in the body that have a regular cycle',
                2 => 'Circadian rhythms are physiological and behavioural functions and processes in the body that have an irregular cycle',
                3 => 'Circadian rhythms are physiological and behavioural functions and processes in the body that have do not have a cycle',
                4 => 'Circadian rhythms are physical and mental functions and  processes in    the body that have do not have a cycle'
            ),
            'answer' => 'Circadian rhythms are physiological and behavioural functions and processes in the body that have a regular cycle'
        ),
        'q65' => array(
            'type' => 'radio',
            'body' => 'Why is written communication inefficient?',
            'options' => array(
                1 => 'Because there is no feedback, tone of voice or body language',
                2 => 'Because it is easy to make spelling mistakes',
                3 => 'Because verbal communication doesn’t allow feedback',
                4 => 'Because there is feedback and body language'
            ),
            'answer' => 'Because there is no feedback, tone of voice or body language'
        ),
        'q72' => array(
            'type' => 'radio',
            'body' => 'What is the definition of stress?',
            'options' => array(
                1 => 'A mental force, that when applied to a system, causes some minor modification of its form, where forces can only be due to social pressures',
                2 => 'Any force, that when applied to a system, causes some significant modification of its form, where forces can be physical, psychological or due to social pressures',
                3 => 'The aircraft maintenance engineer does not suffer from stress so a definition does not apply',
                4 => 'No force, that when applied to a system, causes no minor modification of its form, where forces are not due to social pressures'
            ),
            'answer' => 'A mental force, that when applied to a system, causes some minor modification of its form, where forces can only be due to social pressures'
        ),
        'q88' => array(
            'type' => 'radio',
            'body' => 'What are the three main types of violations?',
            'options' => array(
                1 => 'They are Random, accidental and unintentional',
                2 => 'Routine, Situational and Exceptional',
                3 => 'Reckless, dangerous and lack of care',
                4 => 'Sabotage, unintentional, Reckless act'
            ),
            'answer' => 'Routine, Situational and Exceptional'
        ),
        //multiple select questions
        'q83' => array(
            'type' => 'simple_multiple_select',
            'body' => 'Select four causes of FATIGUE<br />Mark the correct options from the listing',
            'options' => array(
                1 => 'Excessive hours of work',
                2 => 'Only working short hours per day',
                3 => 'Mental and physically',
                4 => 'Insufficient out of hours rest/sleep',
                5 => 'Being correctly hydrated',
                6 => 'Organisational',
                7 => 'Poor planning of work',
                8 => 'Well planned work',
                9 => 'Insufficient personnel',
                10 => 'Good shift pattern',
                11 => 'Poor shift pattern',
                12 => 'Temperature, humidity, noise'
            ),
            'answer' => array(
                'Only working short hours per day',
                'Being correctly hydrated',
                'Well planned work',
                'Good shift pattern'
            )
        )
    );

    return $questions;
}

function pr($s){
    echo "<pre>"; var_dump($s); echo "</pre>";
}

/** start ajaxing the questions **/
add_action('wp_ajax_incrementErrorsNumber', 'incrementErrorsNumber');
add_action('wp_ajax_nopriv_incrementErrorsNumber', 'incrementErrorsNumber');
function incrementErrorsNumber(){
    global $wpdb;
    
    $query = "SELECT errors FROM " . $wpdb->prefix . "courses WHERE user_id = " . get_current_user_id();
    $result = $wpdb->get_row($query);
    
    $error = $result->errors + 1;

    if ($error >= get_option( 'max_wrong_answer' )){
        send_email_when_max_errors_reached();
    }
    echo $error;
    $wpdb->update(
        $wpdb->prefix . 'courses',
        array(
            'errors'   => $error,
        ),
        array( 'user_id' => get_current_user_id() ),
        array(
            '%d'
        )
    );
    die();
}


add_action('wp_ajax_getQuestion', 'getQuestion');
add_action('wp_ajax_nopriv_getQuestion', 'getQuestion');

function getQuestion() {
    global $wpdb;

    check_if_max_errors();

    $args = array(
        'post_type'     => 'aviation-questions',
        'posts_per_page' => -1
    );

    $posts = query_posts( $args );
    $total_posts = count($posts);

    $next_question_index = $_POST['last_question'] + 1;
    $prev_question_index = $_POST['last_question'] - 1;
    $question = $posts[$_POST['last_question']];

    $return_array = array();
    
    $return_array['max_errors_reached'] = false;

    $return_array['question_title'] = get_post_meta($question->ID, "slide_header", true);
    $return_array['question_content'] = apply_filters('the_content', $question->post_content);
    $return_array['has_next_question'] = (isset($posts[$next_question_index])) ? true: false;
    $return_array['progress'] = round( $next_question_index / count($posts) * 100 );
    $return_array['has_prev_question'] = (isset($posts[$prev_question_index])) ? true : false;

    if (get_post_meta($question->ID, "question_type", true) && 
        get_post_meta($question->ID, "question_type", true) == 'radio'){
        $return_array['question_content'] = '<h3 class="question_body">' . get_post_meta($question->ID, "question_body", true) . '</h3>';
        $return_array['question_content'] .= display_radio_question($question->ID);
    } 
    if (get_post_meta($question->ID, "question_type", true) && 
        get_post_meta($question->ID, "question_type", true) == 'drag_cross'){
        $return_array['question_content'] = '<h3 class="question_body">' . get_post_meta($question->ID, "question_body", true) . '</h3>';
        $return_array['question_content'] .= display_drag_cross_question($question->ID);
    }

    if (get_post_meta($question->ID, "question_type", true) && 
        get_post_meta($question->ID, "question_type", true) == 'drag_chain_order'){
        $return_array['question_content'] = '<h3 class="question_body">' . get_post_meta($question->ID, "question_body", true) . '</h3>';
        $return_array['question_content'] .= display_drag_chain_order_question($question->ID);
    }

    $return_array['question_type'] = get_post_meta($question->ID, "question_type", true);
    $return_array['question_titleX'] = $question->post_title;
    save_current_question_number($_POST['last_question']);
    echo json_encode($return_array);
    die();
}

function check_if_max_errors(){
    global $wpdb;
    $query = "SELECT errors FROM " . $wpdb->prefix . "courses WHERE user_id = " . get_current_user_id();
    $result = $wpdb->get_row($query);

    $return_array = array();
    if ($result->errors >= get_option( 'max_wrong_answer' )){
        $return_array['max_errors_reached'] = true; 
        echo json_encode($return_array);
        die();
    }
    return true;
}

function save_current_question_number($question_id){
    global $wpdb;
    $wpdb->update(
        $wpdb->prefix . 'courses',
        array(
            'question_id'   => $question_id,
        ),
        array( 'user_id' => get_current_user_id() ),
        array(
            '%d'
        )
    );
}

function get_user_last_question(){
    global $wpdb;
    $query = "SELECT question_id FROM " . $wpdb->prefix . "courses WHERE user_id = " . get_current_user_id();
    $question_ = $wpdb->get_row($query);
    if ($question_)
        return $question_->question_id;
    else return 0;
}

function display_drag_cross_question($id){
    $question_type = get_post_meta($id, "question_type", true);
    $question_answer = get_post_meta($id, "question_answer", true);
    $options = get_post_meta($id, "question_options", true);
    $options = explode("|", $options);
    shuffle($options);

    $output = "";
    $output .= '<input type="hidden" id="question_type" value="'.$question_type.'" />';
    $output .= '<input type="hidden" id="question_answer" value="'.base64_encode($question_answer).'" />';

    $output .= '<div id="draggable_options">';
    foreach ($options as $key => $value){
        $output .= '<div class="draggable drag_cross_options" id="drag_cross_option_'.$key.'">' . $value . '</div>';
    }
    $output .= '</div>'; //<div id="draggable_options">
    $output .= '<div class="clear"></div>';

    $answers = get_post_meta($id, "question_answer", true);
    $answers = explode("|", $answers);
    $exploded_answers = array();
    foreach ($answers as $answer) {
        $answer = explode("::", $answer);
        $exploded_answers[$answer[0]] = $answer[1];
    }

    $output .= '<div class="cross_holder">';
        $output .= '<div id="cross_left" class="droppable cross_drag_to"><span class="hidden">'.base64_encode($exploded_answers['left']).'</span></div>';
        $output .= '<div id="cross_top" class="droppable cross_drag_to"><span class="hidden">'.base64_encode($exploded_answers['top']).'</span></div>';
        $output .= '<div id="cross_right" class="droppable cross_drag_to"><span class="hidden">'.base64_encode($exploded_answers['right']).'</span></div>';
        $output .= '<div id="cross_bottom" class="droppable cross_drag_to"><span class="hidden">'.base64_encode($exploded_answers['bottom']).'</span></div>';
    $output .= '</div>'; //'<div class="cross_to_drag">';
    return $output;
}

function display_drag_chain_order_question($id){
    $question_type = get_post_meta($id, "question_type", true);
    $question_answer = get_post_meta($id, "question_answer", true);
    $options = get_post_meta($id, "question_options", true);
    $options = explode("|", $options);
    shuffle($options);

    $output = "";
    $output .= '<input type="hidden" id="question_type" value="'.$question_type.'" />';
    $output .= '<input type="hidden" id="question_answer" value="'.base64_encode($question_answer).'" />';

    $output .= '<div id="draggable_chain_options">';
    foreach ($options as $key => $value){
        $output .= '<div class="draggable drag_chain_options" id="drag_chain_option_'.$key.'"><br /><br /><br />' . $value . '</div>';
    }
    $output .= '</div>'; //<div id="draggable_options">
    $output .= '<div class="clear"></div>';

    $answers = get_post_meta($id, "question_answer", true);
    $answers = explode("|", $answers);
    $exploded_answers = array();
    foreach ($answers as $answer) {
        $answer = explode("::", $answer);
        $exploded_answers[$answer[0]] = $answer[1];
    }

    $output .= '<div class="chain_holder">';
        $output .= '<div id="chain_0" class="droppable chain_drag_to"><span class="hidden">'.base64_encode($exploded_answers['0']).'</span></div>';
        $output .= '<div id="chain_1" class="droppable chain_drag_to"><span class="hidden">'.base64_encode($exploded_answers['1']).'</span></div>';
        $output .= '<div id="chain_2" class="droppable chain_drag_to"><span class="hidden">'.base64_encode($exploded_answers['2']).'</span></div>';
        $output .= '<div id="chain_3" class="droppable chain_drag_to"><span class="hidden">'.base64_encode($exploded_answers['3']).'</span></div>';
        $output .= '<div id="chain_4" class="droppable chain_drag_to"><span class="hidden">'.base64_encode($exploded_answers['4']).'</span></div>';
    $output .= '</div>'; //'<div class="cross_to_drag">';

    return $output;
}

function display_radio_question($id){
    $question_type = get_post_meta($id, "question_type", true);
    $question_answer = get_post_meta($id, "question_answer", true);
    $options = get_post_meta($id, "question_options", true);
    $options = explode("|", $options);
    shuffle($options);

    $first_char = 97;

    $output = "";
    $output .= '<div class="question_answers">';
        $output .= '<input type="hidden" id="question_type" value="'.$question_type.'" />';
        $output .= '<input type="hidden" id="question_answer" value="'.base64_encode($question_answer).'" />';
        foreach ($options as $key => $value) {
            $output .= '<div class="question_option">';
            $output .= '<div class="question_option_text">' . chr($first_char++) . ') ' . trim($value) . '</div>';
            $output .= '<input id="jop_'.$key.'" class="radio_answer" type="radio" name="radio_answer" value="'.$value.'" />';
            $output .= '<br />';
            $output .= '</div>';
        }
    $output .= '</div>'; //<div class="question_answers">
    return $output;
}

/** generate report - after questionnaire is done**/
/** start ajaxing the questions **/
add_action('wp_ajax_generateReport', 'generateReport');
add_action('wp_ajax_nopriv_generateReport', 'generateReport');

function generateReport() {
    global $wpdb;

    $return_array = array();
    
    echo json_encode($return_array);
    die();
}

/** initiate report - when questionnaire is started **/
/** start ajaxing the questions **/
add_action('wp_ajax_initiateReport', 'initiateReport');
add_action('wp_ajax_nopriv_initiateReport', 'initiateReport');

function initiateReport() {
    global $wpdb;

    $query = "SELECT * FROM " . $wpdb->prefix . "courses WHERE user_id = " . get_current_user_id();
    $report = $wpdb->get_row($query);
    if ($report){
        die();
    }
    $wpdb->insert(
        $wpdb->prefix . 'courses',
        array(
            'user_id'   => get_current_user_id(),
            'start_at'  => date("Y-m-d H:i:s")
        ),
        array(
            '%d',
            '%s'
        )
    );

    die();
}

add_action('wp_head','ajaxurl');
function ajaxurl() { ?>
    <script type="text/javascript">
        var ajaxurl = '<?php echo admin_url('admin-ajax.php'); ?>';
    </script>
<?php }
/** end ajaxing the questions **/

/** User extra fields - licences number **/
add_action( 'show_user_profile', 'add_licences_number' );
add_action( 'edit_user_profile', 'add_licences_number' );

function add_licences_number( $user ){
    ?>
    <h3>User Custom Data</h3>
    <table class="form-table">
        <tr>
            <th><label for="licences_number">Licences Number</label></th>
            <td><input type="text" name="licences_number" value="<?php echo esc_attr(get_the_author_meta( 'licences_number', $user->ID )); ?>" class="regular-text" /></td>
        </tr>
        <tr>
            <th><label for="user_organization">Organization</label></th>
            <td><input type="text" name="user_organization" value="<?php echo esc_attr(get_the_author_meta( 'user_organization', $user->ID )); ?>" class="regular-text" /></td>
        </tr>
        <tr>
            <th><label for="user_clock_number">Clock Number</label></th>
            <td><input type="text" name="user_clock_number" value="<?php echo esc_attr(get_the_author_meta( 'user_clock_number', $user->ID )); ?>" class="regular-text" /></td>
        </tr>
    </table>
    <?php
}

add_action( 'edit_user_profile_update', 'save_licences_number' );

function save_licences_number( $user_id ){
    update_user_meta( $user_id,'licences_number', sanitize_text_field( $_POST['licences_number'] ) );
    update_user_meta( $user_id,'user_organization', sanitize_text_field( $_POST['user_organization'] ) );
    update_user_meta( $user_id,'user_clock_number', sanitize_text_field( $_POST['user_clock_number'] ) );
}

/** decrease licences number on user login **/
add_action('wp_login', 'decrease_licences_on_login', 1, 2);

function decrease_licences_on_login($user_login, $user){
    $licences = get_user_meta( $user->ID, 'licences_number', true ); 
    $new = $licences - 1;
    $x = update_user_meta( 
        $user->ID, 
        'licences_number', 
        $new
    );
}

/** shortcode to show user licences on its profile **/
add_shortcode( 'get_licences_number', 'get_licences_number' );

function get_licences_number(){
    $licences = get_user_meta( get_current_user_id(), 'licences_number', true ); 
    return $licences;
}

add_shortcode( 'show_start_course_button', 'show_start_course_button' );
function show_start_course_button(){
    global $current_user;
    get_currentuserinfo();

    $user_id = get_current_user_id();
    $user_clock_number = get_user_meta( $user_id, 'user_clock_number', true ); 
    $user_organization = get_user_meta( $user_id, 'user_organization', true );
    $user_firstname = $current_user->user_firstname;
    $user_lastname = $current_user->user_lastname;

    $output = "";

    if ($user_clock_number &&
        $user_organization &&
        $user_firstname &&
        $user_lastname) {
        $question_title = get_question_title(get_user_last_question());
        $output .= '<ul id="dashboard_items">';
        if ($question_title){
            $output .= '<li><a title="Questions" href="' . get_site_url() . '/questions/">Continue Course (from <b>'.$question_title.'</b>)</a></li>';
        } else {
            $output .= '<li><a title="Questions" href="' . get_site_url() . '/questions/">Start Course</a></li>';
        }
        $output .= '</ul>';
    } else {
        $output .= '<form method="post" id="user_info">';
        $output .= "<h5>You need to fill in some user info</h5>";
        $output .= '<label>Organization: </label><input type="text" name="user_organization" id="user_organization" value="'.$user_organization.'" class="user_info_input" />';
        $output .= '<span id="error_organization" class="user_form_error">Please fill in <b>Organization</b></span>';
        $output .= '<label>First Name: </label><input type="text" name="user_first_name" id="user_first_name" value="'.$user_firstname.'" class="user_info_input" />';
        $output .= '<span id="error_first_name" class="user_form_error">Please fill in <b>First Name</b></span>';
        $output .= '<label>Last Name: </label><input type="text" name="user_last_name" id="user_last_name" value="'.$user_lastname.'" class="user_info_input" />';
        $output .= '<span id="error_last_name" class="user_form_error">Please fill in <b>Last Name</b></span>';
        $output .= '<label>Clock Number: </label><input type="text" name="user_clock_number" id="user_clock_number" value="'.$user_clock_number.'" class="user_info_input" />';
        $output .= '<span id="error_clock_number" class="user_form_error">Please fill in <b>Clock Number</b></span>';
        $output .= '<input type="submit" value="Save your info" class="user_info_submit" />';
        $output .= '</form>';
        //$output .= '<li>' . get_option( 'aviation_missing_user_data' ) . '</li>';
    }
    
    return $output;
}

function save_user_info(){
    //echo "<pre>"; var_dump($_POST); echo "</pre>"; die();
    if ($_POST){
        global $current_user;
        get_currentuserinfo();

        $user_id = get_current_user_id();

        update_user_meta( $user_id,'licences_number', sanitize_text_field( get_option( 'initial_licences_number' ) ) );
        update_user_meta( $user_id,'user_organization', sanitize_text_field( $_POST['user_organization'] ) );
        update_user_meta( $user_id,'user_clock_number', sanitize_text_field( $_POST['user_clock_number'] ) );
        update_user_meta( $user_id,'first_name', sanitize_text_field( $_POST['user_first_name'] ) );
        update_user_meta( $user_id,'last_name', sanitize_text_field( $_POST['user_last_name'] ) );

        return "<h5>Your user info is now saved.<br />You may start your course.</h6>";
    }
}

function get_question_title($last_question){
    global $wpdb;

    $args = array(
        'post_type'     => 'aviation-questions',
        'posts_per_page' => -1
    );

    $posts = query_posts( $args );

    $question = $posts[$last_question];
    if ($question){
        return get_post_meta($question->ID, "slide_header", true);
    } else {
        return NULL;
    }
}

add_shortcode( 'news-widget', 'get_latest_articles' );

function get_latest_articles($atts, $content = null) {
    extract(shortcode_atts(array(
        'numberposts' => 2,
        'category' => get_cat_ID( 'Blog' )
    ), $atts ) );

    $limit = 2;

    $query_args = array(
        'numberposts' => 2,
        'category' => get_cat_ID( 'News' )
    );

    $posts = get_posts( $query_args );

    $output = "";

    foreach ( $posts as $post ) : setup_postdata( $post );
        $output .= '<div class="footer_article">';
            $output .= '<a href="'.get_permalink($post->ID).'">'.get_the_title($post->ID).'</a><br />';
            $output .= get_the_excerpt();
            $output .= '<br /><br />';
        $output .= '</div>';
    endforeach;

    //pr($posts);

    return $output;
}